int closestToZero(int arr[], int n)
        {
            // your code here 
            if(n == 1)
                return arr[0] * 2;
            sort(arr, arr + n);
            if(arr[0] > 0)
                return arr[0] + arr[1];
            else if(arr[n - 1] < 0)
                return arr[n - 1] + arr[n - 2];
                
            int low = 0, high = n - 1, res = 0, absdiff = INT_MAX;
            
            while(low<high)
            {
                int diff = arr[low] + arr[high];
                if(diff == 0)
                    return 0;
                if(diff < 0)
                    low++;
                else
                    high--;
                if(abs(diff) < absdiff)
                {
                    absdiff = abs(diff);
                    res = diff;
                }
                else if(abs(diff) == absdiff)
                    res = max(res, diff);
            }
            return res;
        }
        
        
        
        
        
        
        // duplicate
           int findDuplicate(vector<int>& nums) {
        
        int fast = nums[0];
        int slow = nums[0];
        
        do{
            
            slow= nums[slow] ;
            fast = nums[nums[fast]] ;
            
            
        }
        while(fast!=slow);
        fast=nums[0];
        while(slow!=fast)
        {
            slow=nums[slow];
            fast=nums[fast];
            
        }
        
        return fast;
        
        //minDistance
        int indexl = -1, indexr = -1;
int dist = INT_MAX;
for(int i = 0; i< n; i++)
{
if(a[i] == x)
{
indexl = i;
}
else if(a[i] == y)
{
indexr = i;
}

if(indexl != -1 && indexr != -1 && abs(indexl - indexr) < dist)
{
dist = abs(indexr - indexl);
}
}
if(dist == INT_MAX)
{
return -1;
}
return dist;

}
